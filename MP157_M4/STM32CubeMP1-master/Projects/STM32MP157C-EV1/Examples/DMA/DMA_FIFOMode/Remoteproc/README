/**
  @page DMA_FIFOMode DMA FIFO mode Example started by Linux Remote Processor Framework

  @verbatim
  ******************** (C) COPYRIGHT 2019 STMicroelectronics *******************
  * @file    DMA/DMA_FIFOMode/Remoteproc/README
  * @author  MCD Application Team
  * @brief   How to run example using Linux Remote Processor Framework
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  @endverbatim

@par Description of M4 Cube example with Linux Remote Processor Framework

When Cube firmware is running on Cortex-M4, System Clock tree and regulators(vrefbuf) are configured by Cortex-A7
Besides, clock source for each peripheral assigned to Cortex-M4 is done by Cortex-A7.


@par How to use it ?

In order to make the program work with Linux running on Cortex-A7, you must do the following :
Before running M4 Cube example, you have to
1) interrupt uboot
2) choose the right configuration to make sure that M4 resources are assigned to Linux Resource Manager driver

Then,
 - Start example using the following command: "fw_cortex_m4.sh start" under example directory installed in userfs partition
     * it will load and start firmware using Linux Remote Processor
 - Stop example using the following command: "fw_cortex_m4.sh stop" under example directory installed in userfs partition
     * it will stop firmware using Linux Remote Processor

@par Example Description
This example provides a description of how to use a DMA to transfer 
a word data buffer from Flash memory to embedded SRAM with FIFO mode
enabled through the HAL API.

At the beginning of the main program the HAL_Init() function is called to reset 
all the peripherals, initialize the systick.
Then the System clock source is configured by the SystemClock_Config() function in case of Engineering Mode, this clock configuration is done
by the Firmware running on the Cortex-A7 in case of Production Mode.

DMA2 is configured to transfer the contents of a 32-word data 
buffer stored in Flash memory to the reception buffer declared in RAM.

In this example the FIFO mode is enabled and the FIFO threshold is configured
as "FULL". Also an incremental burst transfer of 4 beats is requested. 

The start of transfer is triggered by software. DMA2 memory-to-memory
transfer is enabled. Source and destination addresses incrementing is also enabled.
The transfer is started by setting the stream enable bit for DMA2.
At the end of the transfer a Transfer Complete interrupt is generated since it
is enabled and the callback function (customized by user) is called.
 

STM32MP157C-EV1 Board's LEDs can be used to monitor the transfer status:
 - LED4 is ON when the transfer is complete (into the Transfer Complete interrupt
   routine).
 - LED4 is Toggled with a period of 200 ms when there is a transfer error 
 - LED4 is Toggled with a period of 1000 ms when when Error_Handler is called

It is possible to select a different stream for the DMA transfer example

@note Care must be taken when using HAL_Delay(), this function provides accurate delay (in milliseconds)
      based on variable incremented in SysTick ISR. This implies that if HAL_Delay() is called from
      a peripheral ISR process, then the SysTick interrupt must have higher priority (numerically lower)
      than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
      To change the SysTick interrupt priority you have to use HAL_NVIC_SetPriority() function.
      
@note The application needs to ensure that the SysTick time base is always set to 1 millisecond
      to have correct HAL operation.

@par Directory contents 

  - DMA/DMA_FIFOMode/Src/system_stm32mp1xx.c    STM32MP1xx system clock configuration file
  - DMA/DMA_FIFOMode/Src/stm32mp1xx_it.c        Interrupt handlers
  - DMA/DMA_FIFOMode/Src/main.c                Main program
  - DMA/DMA_FIFOMode/Inc/stm32mp1xx_hal_conf.h  HAL Configuration file
  - DMA/DMA_FIFOMode/Inc/stm32mp1xx_it.h        Interrupt handlers header file
  - DMA/DMA_FIFOMode/Inc/main.h                Main program header file

     
@par Hardware and Software environment

  - This example runs on STM32MP157CAAx devices.

  - This example has been tested with STMicroelectronics STM32MP157C-EV1 
    evaluation boards and can be easily tailored to any other supported device 
    and development board.    

@par How to use it ? 

In order to make the program work, you must do the following :
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example

   
 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
